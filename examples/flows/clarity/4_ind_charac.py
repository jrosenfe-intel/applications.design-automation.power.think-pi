# ------------- Introduction -------------
'''
After the 3D extraction is completed and the touchstone file is generated,
the package inductor can be characterized, producing the following:
- S-parameters passivity check per each ports
- Package inductor parameters
- Inductance and resistance heatmaps between switching ports and
  any other ports shorted, at a specific frequency
- Inductance and resistance heatmaps, in Excel format,
  with switching ports are shorted 
'''

# ------------- User defined parameters -------------

# Inputs
# ------
#TOUCHSTONE_PATH_NAME = r"..\thinkpi_test_sparam\gnr_fivr_io_flex_2021_10_11_15_4_ind_west_coax1p0_fixed_30Ohm.S29P"

TOUCHSTONE_PATH_NAME = r"..\thinkpi_test_sparam\dmr_ap_ucc1_pwr_vccin_uciea_23ww42_odb_clarity_ready_Passive.S116P"

FREQ = 50e6
FROM_PORTS = ['SW1', 'SW2'] #['SW0', 'SW1']
EXCLUDE_PORTS = None # ['2:9'] # Place None if you don't want to exclude any port from the map

# PORT_MAP can be generated by ThinkPI or manualy
PORT_MAP = r'..\thinkpi_test_sparam\ucie_port_map.csv'


# ------------- Don't modify anything below this line -------------
from thinkpi.operations.loader import Waveforms

if __name__ == '__main__':
    # Load touchstone
    w = Waveforms()
    w.load_waves(TOUCHSTONE_PATH_NAME)

    # S-paramteres reciprocallity, passivity, and losslessness check
    w.sparam_props()

    # @ FREQ
    w.ind_char(freq=FREQ)

    # Plot loop inductance and resistance between ports
    # This is good to evaluate connection effectivness
    ind, res = w.heatmap_ports(freq=FREQ, from_ports=FROM_PORTS,
                              exclude_ports=EXCLUDE_PORTS)
    print(ind)
    print(res)

    # Create inductance and resistance Excel heatmaps of the package inductor
    # Switch ports are automatically shorted
    w.heatmap_ind_res(PORT_MAP, FREQ)
    

    